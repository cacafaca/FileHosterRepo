// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProCode.FileHosterRepo.Dal.DataAccess;

namespace ProCode.FileHosterRepo.Dal.Migrations
{
    [DbContext(typeof(FileHosterRepoContext))]
    partial class FileHosterRepoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.MediaHeader", b =>
                {
                    b.Property<int>("MediaHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ReferenceLink")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("MediaHeaderId");

                    b.HasIndex("UserId");

                    b.ToTable("media_header");
                });

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.MediaHeaderTag", b =>
                {
                    b.Property<int>("MediaHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("MediaTagId")
                        .HasColumnType("int");

                    b.HasKey("MediaHeaderId", "MediaTagId");

                    b.HasIndex("MediaTagId");

                    b.ToTable("media_header_tag");
                });

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.MediaLink", b =>
                {
                    b.Property<int>("MediaLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LinkOrderId")
                        .HasColumnType("int");

                    b.Property<int>("MediaVersionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MediaLinkId");

                    b.HasIndex("UserId");

                    b.HasIndex("MediaVersionId", "LinkOrderId")
                        .IsUnique();

                    b.ToTable("media_link");
                });

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.MediaPart", b =>
                {
                    b.Property<int>("MediaPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Episode")
                        .HasColumnType("int");

                    b.Property<int>("MediaHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ReferenceLink")
                        .HasColumnType("text");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MediaPartId");

                    b.HasIndex("UserId");

                    b.HasIndex("MediaHeaderId", "Season", "Episode")
                        .IsUnique();

                    b.ToTable("media_part");
                });

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.MediaPartTag", b =>
                {
                    b.Property<int>("MediaPartId")
                        .HasColumnType("int");

                    b.Property<int>("MediaTagId")
                        .HasColumnType("int");

                    b.HasKey("MediaPartId", "MediaTagId");

                    b.HasIndex("MediaTagId");

                    b.ToTable("media_part_tag");
                });

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.MediaTag", b =>
                {
                    b.Property<int>("MediaTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.HasKey("MediaTagId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("media_tag");
                });

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.MediaVersion", b =>
                {
                    b.Property<int>("MediaVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("MediaPartId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VersionComment")
                        .HasColumnType("text");

                    b.HasKey("MediaVersionId");

                    b.HasIndex("MediaPartId");

                    b.HasIndex("UserId");

                    b.ToTable("media_version");
                });

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.MediaVersionTag", b =>
                {
                    b.Property<int>("MediaVersionId")
                        .HasColumnType("int");

                    b.Property<int>("MediaTagId")
                        .HasColumnType("int");

                    b.HasKey("MediaVersionId", "MediaTagId");

                    b.HasIndex("MediaTagId");

                    b.ToTable("media_version_tag");

                    b
                        .HasComment("Connection between MediaVersions and MediaTags tables.");
                });

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Logged")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.MediaHeader", b =>
                {
                    b.HasOne("ProCode.FileHosterRepo.Dal.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.MediaHeaderTag", b =>
                {
                    b.HasOne("ProCode.FileHosterRepo.Dal.Model.MediaHeader", "MediaHeader")
                        .WithMany()
                        .HasForeignKey("MediaHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProCode.FileHosterRepo.Dal.Model.MediaTag", "MediaTag")
                        .WithMany()
                        .HasForeignKey("MediaTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaHeader");

                    b.Navigation("MediaTag");
                });

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.MediaLink", b =>
                {
                    b.HasOne("ProCode.FileHosterRepo.Dal.Model.MediaVersion", "Version")
                        .WithMany()
                        .HasForeignKey("MediaVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProCode.FileHosterRepo.Dal.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.MediaPart", b =>
                {
                    b.HasOne("ProCode.FileHosterRepo.Dal.Model.MediaHeader", "MediaHeader")
                        .WithMany()
                        .HasForeignKey("MediaHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProCode.FileHosterRepo.Dal.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaHeader");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.MediaPartTag", b =>
                {
                    b.HasOne("ProCode.FileHosterRepo.Dal.Model.MediaPart", "MediaPart")
                        .WithMany()
                        .HasForeignKey("MediaPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProCode.FileHosterRepo.Dal.Model.MediaTag", "MediaTag")
                        .WithMany()
                        .HasForeignKey("MediaTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaPart");

                    b.Navigation("MediaTag");
                });

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.MediaVersion", b =>
                {
                    b.HasOne("ProCode.FileHosterRepo.Dal.Model.MediaPart", "MediaPart")
                        .WithMany()
                        .HasForeignKey("MediaPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProCode.FileHosterRepo.Dal.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaPart");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProCode.FileHosterRepo.Dal.Model.MediaVersionTag", b =>
                {
                    b.HasOne("ProCode.FileHosterRepo.Dal.Model.MediaTag", "MediaTag")
                        .WithMany()
                        .HasForeignKey("MediaTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProCode.FileHosterRepo.Dal.Model.MediaVersion", "MediaVersion")
                        .WithMany()
                        .HasForeignKey("MediaVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaTag");

                    b.Navigation("MediaVersion");
                });
#pragma warning restore 612, 618
        }
    }
}
